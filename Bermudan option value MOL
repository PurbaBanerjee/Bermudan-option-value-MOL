import numpy as np
import scipy.stats as si
#import sympy as sy
import math
from scipy.linalg import expm
from numpy.linalg import inv
import random
import time
from matplotlib import pyplot as plt
%matplotlib inline
cx=80.0
d=1.2
n=250
dx=1/n
n1=n+1
n2=n-1
sigma=0.3
r=0.06
T=1
K=44
x=np.zeros(n1+1)
h=np.zeros(n1+2)
x[1:n1]=dx
x = np.cumsum(x)
x[n1]=1.1

xx=np.zeros(n1+1)
xx=(cx*x)/(d-x)
fl=xx[n1]
for i in range(1,n1+1):
    h[i]=xx[i]-xx[i-1]
A=np.zeros((n,n))
B=np.zeros((n,n))
C=np.zeros((n,n))
U0=np.zeros(n)
frhs=np.zeros(n)
for i in range(n):
    A[i][i]=-(sigma*sigma*xx[i+1]*xx[i+1])/(h[i+1]*h[i+2])
    C[i][i]=-r
for i in range(n-1):
    A[i][i+1]=(sigma*sigma*xx[i+1]*xx[i+1])/((h[i+1]+h[i+2])*h[i+2])
    B[i,i+1]=(r*xx[i+1])/(h[i+1]+h[i+2])
for i in range(1,n):
    A[i][i-1]=(sigma*sigma*xx[i+1]*xx[i+1])/((h[i+1]+h[i+2])*h[i+1])
    B[i][i-1]=-(r*xx[i+1])/(h[i+1]+h[i+2])
for i in range(n):
    U0[i]=max(K-xx[i+1],0) 
fhs=((sigma*sigma*xx[1]*xx[1])/((h[1]+h[2])*h[1])) -((r*xx[1])/(h[1]+h[2]))
frhs[0]=fhs*(K)
F=np.array([frhs]).T
AA=A+B+C
G3=np.dot(inv(AA),(expm(T*AA))-np.identity(n))
def eu(T,U0):
    U=np.array([U0]).T
    E2=np.dot(expm(T*AA),U)
    E3=E2+np.dot(G3,F)
    return E3
   
V=np.zeros((n,10))
t1=time.time()
t0=time.time()
U1=eu(0.1,U0)# at 9/10
for i in range(n):
    V[i][0]=U1[i]
t2=time.time()
print("Time elapsed at 1st step:", t2-t1)
U1=np.maximum(U1.reshape(-1),K-xx[1:n1].reshape(-1))
U1=U1.reshape(-1)
t1=time.time()
U2=eu(0.1,U1)#value at t=8/10
for i in range(n):
    V[i][1]=U2[i]
t2=time.time()
print("Time elapsed at 2nd step:", t2-t1)
U2=np.maximum(U2.reshape(-1),K-xx[1:n1].reshape(-1))
U2=U2.reshape(-1)
t1=time.time()
U3=eu(0.1,U2)# at 7/10
for i in range(n):
    V[i][2]=U3[i]
t2=time.time()
print("Time elapsed at 3rd step:", t2-t1)
U3=np.maximum(U3.reshape(-1),K-xx[1:n1].reshape(-1))
U3=U3.reshape(-1)
t1=time.time()
U4=eu(0.1,U3)#at 6/10
for i in range(n):
    V[i][3]=U4[i]
t2=time.time()
print("Time elapsed at 4th step:", t2-t1)
U4=np.maximum(U4.reshape(-1),K-xx[1:n1].reshape(-1))
U4=U4.reshape(-1)
t1=time.time()
U5=eu(0.1,U4)# at 5/10
for i in range(n):
    V[i][4]=U5[i]
t2=time.time()
print("Time elapsed at 5th step:", t2-t1)
U5=np.maximum(U5.reshape(-1),K-xx[1:n1].reshape(-1))
U5=U5.reshape(-1)
t1=time.time()
U6=eu(0.1,U5)# at 4/10
for i in range(n):
    V[i][5]=U6[i]
t2=time.time()
print("Time elapsed at 6th step:", t2-t1)
U6=np.maximum(U6.reshape(-1),K-xx[1:n1].reshape(-1))
U6=U6.reshape(-1)
t1=time.time()
U7=eu(0.1,U6)# at 3/10
for i in range(n):
    V[i][6]=U7[i]
t2=time.time()
print("Time elapsed at 7th step:", t2-t1)
U7=np.maximum(U7.reshape(-1),K-xx[1:n1].reshape(-1))
U7=U7.reshape(-1)
t1=time.time()
U8=eu(0.1,U7)# at 2/10
for i in range(n):
    V[i][7]=U8[i]
t2=time.time()
print("Time elapsed at 8th step:", t2-t1)
U8=np.maximum(U8.reshape(-1),K-xx[1:n1].reshape(-1))
U8=U8.reshape(-1)
t1=time.time()
U9=eu(0.1,U8)# at 1/10
for i in range(n):
    V[i][8]=U9[i]
t2=time.time()
print("Time elapsed at 9th step:", t2-t1)
U9=np.maximum(U9.reshape(-1),K-xx[1:n1].reshape(-1))
U9=U9.reshape(-1)
t1=time.time()
U10=eu(0.1,U9)# at 0
for i in range(n):
    V[i][9]=U10[i]
t2=time.time()
t3=time.time()
print("Time elapsed at 10th step:", t2-t1)
print("Total time elapsed:",t3-t0)
print("The matrix U is:", V)

m=int((2/5)*n -1)
print("The value at xx=11 is:",U10[m])
l=np.abs(U10[m]-6.04590214)
print("The absolute error is:",l )
error=np.log(l)
print("The log error is:", error)
